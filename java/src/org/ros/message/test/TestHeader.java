/* Auto-generated by genmsg_java.py for file /Users/kwc/workspace/ros_comm/test/test_ros/msg/TestHeader.msg */

package org.ros.message.test;

import org.ros.message.std.Header;

import org.ros.message.Message;

import java.nio.ByteBuffer;

public class TestHeader extends Message {

  public Header header = new Header();
  public java.lang.String caller_id = new java.lang.String();
  public java.lang.String orig_caller_id = new java.lang.String();
  public short auto_header;

  public TestHeader() {
  }

  public static java.lang.String __s_getDataType() { return "test_ros/TestHeader"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "4b5a00f536da2f756ba6aebcf795a967"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "Header header\n" +
"\n" +
"# caller_id of most recent node to send this message\n" +
"string caller_id\n" +
"# caller_id of the original node to send this message\n" +
"string orig_caller_id\n" +
"\n" +
"byte auto_header # autoset header on response\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public TestHeader clone() {
    TestHeader c = new TestHeader();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += header.serializationLength();
    __l += 4 + caller_id.length();
    __l += 4 + orig_caller_id.length();
    __l += 1; // auto_header
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    header.serialize(bb, seq);
    Serialization.writeString(bb, caller_id);
    Serialization.writeString(bb, orig_caller_id);
    bb.put((byte)auto_header);
  }

  public void deserialize(ByteBuffer bb) {
    header.deserialize(bb);
    caller_id = Serialization.readString(bb);
    orig_caller_id = Serialization.readString(bb);
    auto_header = (short)(bb.get() & 0xff);
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof TestHeader))
      return false;
    TestHeader other = (TestHeader) o;
    return
      header.equals(other.header) &&
      caller_id.equals(other.caller_id) &&
      orig_caller_id.equals(other.orig_caller_id) &&
      auto_header == other.auto_header &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.header == null ? 0 : this.header.hashCode());
    result = prime * result + (this.caller_id == null ? 0 : this.caller_id.hashCode());
    result = prime * result + (this.orig_caller_id == null ? 0 : this.orig_caller_id.hashCode());
    result = prime * result + this.auto_header;
    return result;
  }
} // class TestHeader

