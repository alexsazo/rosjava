/* Auto-generated by genmsg_java.py for file /Users/kwc/workspace/ros_comm/test/test_ros/msg/TestPrimitives.msg */

package org.ros.message.test;

import org.ros.message.Message;

import org.ros.message.Time;

import org.ros.message.Duration;

import java.nio.ByteBuffer;

public class TestPrimitives extends Message {

  public java.lang.String caller_id = new java.lang.String();
  public java.lang.String orig_caller_id = new java.lang.String();
  public java.lang.String str = new java.lang.String();
  public short b;
  public short int16;
  public int int32;
  public long int64;
  public char c;
  public int uint16;
  public long uint32;
  public long uint64;
  public float float32;
  public double float64;
  public Time t = new Time();
  public Duration d = new Duration();

  public TestPrimitives() {
  }

  public static java.lang.String __s_getDataType() { return "test_ros/TestPrimitives"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "3e70f428a22c0d26ca67f87802c8e00f"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# Integration test message of all primitive types\n" +
"\n" +
"# caller_id of most recent node to send this message\n" +
"string caller_id\n" +
"# caller_id of the original node to send this message\n" +
"string orig_caller_id\n" +
"\n" +
"string str\n" +
"byte b\n" +
"int16 int16\n" +
"int32 int32\n" +
"int64 int64\n" +
"char c\n" +
"uint16 uint16\n" +
"uint32 uint32\n" +
"uint64 uint64\n" +
"float32 float32\n" +
"float64 float64\n" +
"time t\n" +
"duration d\n" +
"\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public TestPrimitives clone() {
    TestPrimitives c = new TestPrimitives();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += 4 + caller_id.length();
    __l += 4 + orig_caller_id.length();
    __l += 4 + str.length();
    __l += 1; // b
    __l += 2; // int16
    __l += 4; // int32
    __l += 8; // int64
    __l += 1; // c
    __l += 2; // uint16
    __l += 4; // uint32
    __l += 8; // uint64
    __l += 4; // float32
    __l += 8; // float64
    __l += 8; // t
    __l += 8; // d
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    Serialization.writeString(bb, caller_id);
    Serialization.writeString(bb, orig_caller_id);
    Serialization.writeString(bb, str);
    bb.put((byte)b);
    bb.putShort(int16);
    bb.putInt(int32);
    bb.putLong(int64);
    bb.put((byte)c);
    bb.putShort((short)uint16);
    bb.putInt((int)uint32);
    bb.putLong(uint64);
    bb.putFloat(float32);
    bb.putDouble(float64);
    Serialization.writeTime(bb, t);
    Serialization.writeDuration(bb, d);
  }

  public void deserialize(ByteBuffer bb) {
    caller_id = Serialization.readString(bb);
    orig_caller_id = Serialization.readString(bb);
    str = Serialization.readString(bb);
    b = (short)(bb.get() & 0xff);
    int16 = bb.getShort();
    int32 = bb.getInt();
    int64 = bb.getLong();
    c = (char)(bb.get() & 0xff);
    uint16 = (int)(bb.getShort() & 0xffff);
    uint32 = (long)(bb.getInt() & 0xffffffff);
    uint64 = bb.getLong();
    float32 = bb.getFloat();
    float64 = bb.getDouble();
    t = Serialization.readTime(bb);
    d = Serialization.readDuration(bb);
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof TestPrimitives))
      return false;
    TestPrimitives other = (TestPrimitives) o;
    return
      caller_id.equals(other.caller_id) &&
      orig_caller_id.equals(other.orig_caller_id) &&
      str.equals(other.str) &&
      b == other.b &&
      int16 == other.int16 &&
      int32 == other.int32 &&
      int64 == other.int64 &&
      c == other.c &&
      uint16 == other.uint16 &&
      uint32 == other.uint32 &&
      uint64 == other.uint64 &&
      float32 == other.float32 &&
      float64 == other.float64 &&
      t.equals(other.t) &&
      d.equals(other.d) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.caller_id == null ? 0 : this.caller_id.hashCode());
    result = prime * result + (this.orig_caller_id == null ? 0 : this.orig_caller_id.hashCode());
    result = prime * result + (this.str == null ? 0 : this.str.hashCode());
    result = prime * result + this.b;
    result = prime * result + this.int16;
    result = prime * result + this.int32;
    result = prime * result + (int)(this.int64 ^ (this.int64 >>> 32));
    result = prime * result + this.c;
    result = prime * result + this.uint16;
    result = prime * result + (int)(this.uint32 ^ (this.uint32 >>> 32));
    result = prime * result + (int)(this.uint64 ^ (this.uint64 >>> 32));
    result = prime * result + Float.floatToIntBits(this.float32);
    result = prime * result + (int)((tmp = Double.doubleToLongBits(this.float64)) ^ (tmp >>> 32));
    result = prime * result + (this.t == null ? 0 : this.t.hashCode());
    result = prime * result + (this.d == null ? 0 : this.d.hashCode());
    return result;
  }
} // class TestPrimitives

