/* Auto-generated by genmsg_java.py for file /opt/ros/unstable/stacks/common_msgs/sensor_msgs/msg/RegionOfInterest.msg */

package org.ros.message.sensor;

import org.ros.message.Message;

import java.nio.ByteBuffer;

public class RegionOfInterest extends Message {

  public long x_offset;
  public long y_offset;
  public long height;
  public long width;
  public boolean do_rectify;

  public RegionOfInterest() {
  }

  public static java.lang.String __s_getDataType() { return "sensor_msgs/RegionOfInterest"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "bdb633039d588fcccb441a4d43ccfe09"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# This message is used to specify a region of interest within an image.\n" +
"#\n" +
"# When used to specify the ROI setting of the camera when the image was\n" +
"# taken, the height and width fields should either match the height and\n" +
"# width fields for the associated image; or height = width = 0\n" +
"# indicates that the full resolution image was captured.\n" +
"\n" +
"uint32 x_offset  # Leftmost pixel of the ROI\n" +
"                 # (0 if the ROI includes the left edge of the image)\n" +
"uint32 y_offset  # Topmost pixel of the ROI\n" +
"                 # (0 if the ROI includes the top edge of the image)\n" +
"uint32 height    # Height of ROI\n" +
"uint32 width     # Width of ROI\n" +
"\n" +
"# True if a distinct rectified ROI should be calculated from the \"raw\"\n" +
"# ROI in this message. Typically this should be False if the full image\n" +
"# is captured (ROI not used), and True if a subwindow is captured (ROI\n" +
"# used).\n" +
"bool do_rectify\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public RegionOfInterest clone() {
    RegionOfInterest c = new RegionOfInterest();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += 4; // x_offset
    __l += 4; // y_offset
    __l += 4; // height
    __l += 4; // width
    __l += 1; // do_rectify
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    bb.putInt((int)x_offset);
    bb.putInt((int)y_offset);
    bb.putInt((int)height);
    bb.putInt((int)width);
    bb.put((byte)(do_rectify ? 1 : 0));
  }

  public void deserialize(ByteBuffer bb) {
    x_offset = (long)(bb.getInt() & 0xffffffff);
    y_offset = (long)(bb.getInt() & 0xffffffff);
    height = (long)(bb.getInt() & 0xffffffff);
    width = (long)(bb.getInt() & 0xffffffff);
    do_rectify = bb.get() != 0 ? true : false;
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof RegionOfInterest))
      return false;
    RegionOfInterest other = (RegionOfInterest) o;
    return
      x_offset == other.x_offset &&
      y_offset == other.y_offset &&
      height == other.height &&
      width == other.width &&
      do_rectify == other.do_rectify &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (int)(this.x_offset ^ (this.x_offset >>> 32));
    result = prime * result + (int)(this.y_offset ^ (this.y_offset >>> 32));
    result = prime * result + (int)(this.height ^ (this.height >>> 32));
    result = prime * result + (int)(this.width ^ (this.width >>> 32));
    result = prime * result + (this.do_rectify ? 1231 : 1237);
    return result;
  }
} // class RegionOfInterest

